name: "Automerge Feature Branch"

# Controls when the action will run. 
on:
  push:
    branches:
      - 'feature-**'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  trigger:
    name: Detecta palabras clave
    runs-on: ubuntu-latest
    outputs:
      feature: ${{ steps.detectar-feature.outputs.respuesta }}
      release: ${{ steps.detectar-release.outputs.message }}
    if: ${{ contains(github.event.head_commit.message, '(Terminada)') }}
    steps:
      - name: Detectar Feature terminada
        id: detectar-feature
        env:
          MENSAJE_START: finished
        run: echo "::set-output name=respuesta::${MENSAJE_START}"
      - name: Detectar release
        id: detectar-release
        if: ${{ contains(github.event.head_commit.message, '(Release)') }}
        env:
          MENSAJE_RELEASE: si
        run: echo "::set-output name=message::${MENSAJE_RELEASE}"

  update:
    needs: trigger
    name: Merge de develop en feature
    runs-on: ubuntu-latest
    if: ${{ needs.trigger.outputs.feature == 'finished' }}
    steps:
      - name: Mezcla develop -> feature
        uses: tukasz/direct-merge-action@master
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          source-branch: develop
          target-branch: ${{ github.ref }}

  test:
    needs: [trigger, update]
    name: Pruebas unitarias automatizadas
    runs-on: ubuntu-latest
    outputs:
      green: ${{ steps.correcto.outputs.respuesta }}
    steps:
      - uses: actions/checkout@v2
      - name: ConfiguraciÃ³n de entorno de python
        uses: actions/setup-python@v2
        with:
            python-version: '3.9'
      - name: Install environment
        working-directory: ./usuarios
        run: |
          pip install pipenv
          pipenv sync --system --dev
          pip install -r requirements.txt
          export VIRTUAL_ENV="$(pipenv --venv)" PATH="$(pipenv --venv)/bin:$PATH"
      - name: Run unit tests
        working-directory: ./usuarios
        run: |
          coverage run -m pytest -s tests
          coverage report -m --fail-under=80
      - name: Validar resultado con errores
        if: ${{ failure() }}
        env:
          MENSAJE_ERROR: Una o varias pruebas fallaron
        run: echo "::set-output name=mensaje::${MENSAJE_ERROR}"
      - name: Validar resultado sin errores
        id: correcto
        if: ${{ success() }}
        env:
          MENSAJE_MERGE: correcto
        run: echo "::set-output name=respuesta::${MENSAJE_MERGE}"
  
  sonarcloud:
    needs: [trigger, update, test]
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  commit-message:
    needs: [trigger, update, test]
    name: Establer el mensaje del merge
    env:
      COMMIT_MESAGE: Automatic merge of ${{ github.ref }} -> develop
    runs-on: ubuntu-latest
    outputs:
      message: ${{ steps.set-release-message.outputs.message }}
    steps:
    - name: Establecer mensaje
      id: set-release-message
      if: ${{ needs.trigger.outputs.release == 'si' }}
      env:
        COMMIT_MESAGE: Automatic merge of ${{ github.ref }} -> develop with (Release)
      run: echo "::set-output name=message::${COMMIT_MESAGE}"

  merge:
    needs: [trigger, update, test, commit-message]
    name: Merge de feature en develop
    runs-on: ubuntu-latest
    if: ${{ needs.test.outputs.green == 'correcto' }}
    steps:
    - name: Mezcla feature -> develop
      uses: tukasz/direct-merge-action@master
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        source-branch: ${{ github.ref }}
        target-branch: develop
        commit-message: ${{ needs.commit-message.outputs.message }}